diff -rupN original/lock_server.cc new/lock_server.cc
--- original/lock_server.cc	2012-11-26 11:53:44.473426603 +0000
+++ new/lock_server.cc	2012-11-26 11:53:55.753482525 +0000
@@ -6,8 +6,8 @@
 #include <unistd.h>
 #include <arpa/inet.h>
 
-lock_server::lock_server():
-  nacquire (0)
+lock_server::lock_server(class rsm *_rsm):
+ rsm(_rsm), nacquire (0)
 {
 }
 
diff -rupN original/lock_server.h new/lock_server.h
--- original/lock_server.h	2012-11-26 11:53:44.641427430 +0000
+++ new/lock_server.h	2012-11-26 11:53:55.777482649 +0000
@@ -8,14 +8,15 @@
 #include "lock_protocol.h"
 #include "lock_client.h"
 #include "rpc.h"
-
+#include "rsm.h"
 class lock_server {
-
+ private:
+  class rsm *rsm;
  protected:
   int nacquire;
 
  public:
-  lock_server();
+  lock_server(class rsm *rsm=0);
   ~lock_server() {};
   lock_protocol::status stat(int clt, lock_protocol::lockid_t lid, int &);
 };
diff -rupN original/rsm.cc new/rsm.cc
--- original/rsm.cc	2012-11-26 11:53:44.473426603 +0000
+++ new/rsm.cc	2012-11-26 11:53:55.753482525 +0000
@@ -83,6 +83,7 @@
 
 #include "handle.h"
 #include "rsm.h"
+#include "rsm_client.h"
 
 static void *
 recoverythread(void *x)
@@ -132,6 +133,13 @@ rsm::rsm(std::string _first, std::string
   assert(pthread_mutex_unlock(&rsm_mutex)==0);
 }
 
+void
+rsm::reg1(int proc, handler *h)
+{
+  assert(pthread_mutex_lock(&rsm_mutex)==0);
+  procs[proc] = h;
+  assert(pthread_mutex_unlock(&rsm_mutex)==0);
+}
 
 // The recovery thread runs this function
 void
@@ -162,7 +170,7 @@ rsm::recovery()
 bool
 rsm::sync_with_backups()
 {
-  // For lab 8
+  // For lab 6
   return true;
 }
 
@@ -170,7 +178,7 @@ rsm::sync_with_backups()
 bool
 rsm::sync_with_primary()
 {
-  // For lab 8
+  // For lab 6
   return true;
 }
 
@@ -182,13 +190,34 @@ rsm::sync_with_primary()
 bool
 rsm::statetransfer(std::string m)
 {
-  // For lab 8
+    rsm_protocol::transferres r;
+  handle h(m);
+  int ret;
+  printf("rsm::statetransfer: contact %s w. my last_myvs(%d,%d)\n", 
+	 m.c_str(), last_myvs.vid, last_myvs.seqno);
+  if (h.get_rpcc()) {
+    assert(pthread_mutex_unlock(&rsm_mutex)==0);
+    ret = h.get_rpcc()->call(rsm_protocol::transferreq, cfg->myaddr(), 
+			     last_myvs, r, rpcc::to(1000));
+    assert(pthread_mutex_lock(&rsm_mutex)==0);
+  }
+  if (h.get_rpcc() == 0 || ret != rsm_protocol::OK) {
+    printf("rsm::statetransfer: couldn't reach %s %lx %d\n", m.c_str(), 
+	   (long unsigned) h.get_rpcc(), ret);
+    return false;
+  }
+  if (stf && last_myvs != r.last) {
+    stf->unmarshal_state(r.state);
+  }
+  last_myvs = r.last;
+  printf("rsm::statetransfer transfer from %s success, vs(%d,%d)\n", 
+	 m.c_str(), last_myvs.vid, last_myvs.seqno);
   return true;
 }
 
 bool
 rsm::statetransferdone(std::string m) {
-  // For lab 8
+  // For lab 6
   return true;
 }
 
@@ -233,6 +262,21 @@ rsm::commit_change()
 }
 
 
+std::string
+rsm::execute(int procno, std::string req)
+{
+  printf("execute\n");
+  handler *h = procs[procno];
+  assert(h);
+  unmarshall args(req);
+  marshall rep;
+  std::string reps;
+  rsm_protocol::status ret = h->fn(args, rep);
+  marshall rep1;
+  rep1 << ret;
+  rep1 << rep.str();
+  return rep1.str();
+}
 
 //
 // Clients call client_invoke to invoke a procedure on the replicated state
@@ -244,7 +288,7 @@ rsm_client_protocol::status
 rsm::client_invoke(int procno, std::string req, std::string &r)
 {
   int ret = rsm_protocol::OK;
-  // For lab 8
+  // For lab 6
   return ret;
 }
 
@@ -259,7 +303,7 @@ rsm_protocol::status
 rsm::invoke(int proc, viewstamp vs, std::string req, int &dummy)
 {
   rsm_protocol::status ret = rsm_protocol::OK;
-  // For lab 8
+  // For lab 6
   return ret;
 }
 
@@ -271,7 +315,11 @@ rsm::transferreq(std::string src, viewst
 {
   assert(pthread_mutex_lock(&rsm_mutex)==0);
   int ret = rsm_protocol::OK;
-  // For lab 8
+  printf("transferreq from %s (%d,%d) vs (%d,%d)\n", src.c_str(), 
+	 last.vid, last.seqno, last_myvs.vid, last_myvs.seqno);
+  if (stf && last != last_myvs) 
+    r.state = stf->marshal_state();
+  r.last = last_myvs;
   assert(pthread_mutex_unlock(&rsm_mutex)==0);
   return ret;
 }
@@ -284,7 +332,7 @@ rsm::transferdonereq(std::string m, int
 {
   int ret = rsm_client_protocol::OK;
   assert (pthread_mutex_lock(&rsm_mutex) == 0);
-  // For lab 8
+  // For lab 6
   assert (pthread_mutex_unlock(&rsm_mutex) == 0);
   return ret;
 }
@@ -430,6 +478,16 @@ rsm::breakpoint2()
   }
 }
 
+void 
+rsm::partition1()
+{
+  if (dopartition) {
+    net_repair_wo(false);
+    dopartition = false;
+    partitioned = true;
+  }
+}
+
 rsm_test_protocol::status
 rsm::breakpointreq(int b, int &r)
 {
diff -rupN original/rsm_client.cc new/rsm_client.cc
--- original/rsm_client.cc	2012-11-26 11:53:44.641427430 +0000
+++ new/rsm_client.cc	2012-11-26 11:53:55.777482649 +0000
@@ -31,6 +31,7 @@ rsm_client::rsm_client(std::string dst)
 void
 rsm_client::primary_failure()
 {
+  // for lab 6
 }
 
 rsm_protocol::status
diff -rupN original/rsm.h new/rsm.h
--- original/rsm.h	2012-11-26 11:53:44.641427430 +0000
+++ new/rsm.h	2012-11-26 11:53:55.777482649 +0000
@@ -13,6 +13,8 @@
 
 
 class rsm : public config_view_change {
+ private:
+  void reg1(int proc, handler *);
  protected:
   std::map<int, handler *> procs;
   config *cfg;
@@ -51,6 +53,7 @@ class rsm : public config_view_change {
   pthread_cond_t sync_cond;
   pthread_cond_t join_cond;
 
+  std::string execute(int procno, std::string req);
   rsm_client_protocol::status client_invoke(int procno, std::string req, 
               std::string &r);
   bool statetransfer(std::string m);
@@ -64,6 +67,7 @@ class rsm : public config_view_change {
   void net_repair_wo(bool heal);
   void breakpoint1();
   void breakpoint2();
+  void partition1();
  public:
   rsm (std::string _first, std::string _me);
   ~rsm() {};
@@ -73,6 +77,163 @@ class rsm : public config_view_change {
   void recovery();
   void commit_change();
 
+ template<class S, class A1, class R>
+    void reg(int proc, S*, int (S::*meth)(const A1 a1, R &));
+  template<class S, class A1, class A2, class R>
+    void reg(int proc, S*, int (S::*meth)(const A1 a1, const A2 a2, R &));
+  template<class S, class A1, class A2, class A3, class R>
+    void reg(int proc, S*, int (S::*meth)(const A1 a1, const A2 a2, 
+            const A3 a3, R &));
+  template<class S, class A1, class A2, class A3, class A4, class R>
+    void reg(int proc, S*, int (S::*meth)(const A1 a1, const A2 a2, 
+            const A3 a3, const A4 a4, R &));
+  template<class S, class A1, class A2, class A3, class A4, class A5, class R>
+    void reg(int proc, S*, int (S::*meth)(const A1 a1, const A2 a2, 
+            const A3 a3, const A4 a4, 
+            const A5 a5, R &));
+
 };
+template<class S, class A1, class R> void
+  rsm::reg(int proc, S*sob, int (S::*meth)(const A1 a1, R & r))
+{
+  class h1 : public handler {
+  private:
+    S * sob;
+    int (S::*meth)(const A1 a1, R & r);
+  public:
+  h1(S *xsob, int (S::*xmeth)(const A1 a1, R & r))
+      : sob(xsob), meth(xmeth) { }
+    int fn(unmarshall &args, marshall &ret) {
+      A1 a1;
+      R r;
+      args >> a1;
+      assert(args.okdone());
+      int b = (sob->*meth)(a1,r);
+      ret << r;
+      return b;
+    }
+  };
+  reg1(proc, new h1(sob, meth));
+}
+
+template<class S, class A1, class A2, class R> void
+  rsm::reg(int proc, S*sob, int (S::*meth)(const A1 a1, const A2 a2, R & r))
+{
+ class h1 : public handler {
+  private:
+    S * sob;
+    int (S::*meth)(const A1 a1, const A2 a2, R & r);
+  public:
+  h1(S *xsob, int (S::*xmeth)(const A1 a1, const A2 a2, R & r))
+    : sob(xsob), meth(xmeth) { }
+    int fn(unmarshall &args, marshall &ret) {
+      A1 a1;
+      A2 a2;
+      R r;
+      args >> a1;
+      args >> a2;
+      assert(args.okdone());
+      int b = (sob->*meth)(a1,a2,r);
+      ret << r;
+      return b;
+    }
+  };
+  reg1(proc, new h1(sob, meth));
+}
+
+template<class S, class A1, class A2, class A3, class R> void
+  rsm::reg(int proc, S*sob, int (S::*meth)(const A1 a1, const A2 a2, 
+             const A3 a3, R & r))
+{
+ class h1 : public handler {
+  private:
+    S * sob;
+    int (S::*meth)(const A1 a1, const A2 a2, const A3 a3, R & r);
+  public:
+  h1(S *xsob, int (S::*xmeth)(const A1 a1, const A2 a2, const A3 a3, R & r))
+    : sob(xsob), meth(xmeth) { }
+    int fn(unmarshall &args, marshall &ret) {
+      A1 a1;
+      A2 a2;
+      A3 a3;
+      R r;
+      args >> a1;
+      args >> a2;
+      args >> a3;
+      assert(args.okdone());
+      int b = (sob->*meth)(a1,a2,a3,r);
+      ret << r;
+      return b;
+    }
+  };
+  reg1(proc, new h1(sob, meth));
+}
+
+template<class S, class A1, class A2, class A3, class A4, class R> void
+  rsm::reg(int proc, S*sob, int (S::*meth)(const A1 a1, const A2 a2, 
+             const A3 a3, const A4 a4, R & r))
+{
+ class h1 : public handler {
+  private:
+    S * sob;
+    int (S::*meth)(const A1 a1, const A2 a2, const A3 a3, const A4 a4, R & r);
+  public:
+  h1(S *xsob, int (S::*xmeth)(const A1 a1, const A2 a2, const A3 a3, 
+            const A4 a4, R & r))
+    : sob(xsob), meth(xmeth) { }
+    int fn(unmarshall &args, marshall &ret) {
+      A1 a1;
+      A2 a2;
+      A3 a3;
+      A4 a4;
+      R r;
+      args >> a1;
+      args >> a2;
+      args >> a3;
+      args >> a4;
+      assert(args.okdone());
+      int b = (sob->*meth)(a1,a2,a3,a4,r);
+      ret << r;
+      return b;
+    }
+  };
+  reg1(proc, new h1(sob, meth));
+}
+
+
+template<class S, class A1, class A2, class A3, class A4, class A5, class R> void
+  rsm::reg(int proc, S*sob, int (S::*meth)(const A1 a1, const A2 a2, 
+             const A3 a3, const A4 a4, 
+             const A5 a5, R & r))
+{
+ class h1 : public handler {
+  private:
+    S * sob;
+    int (S::*meth)(const A1 a1, const A2 a2, const A3 a3, const A4 a4, 
+       const A5 a5, R & r);
+  public:
+  h1(S *xsob, int (S::*xmeth)(const A1 a1, const A2 a2, const A3 a3, 
+            const A4 a4, const A5 a5, R & r))
+    : sob(xsob), meth(xmeth) { }
+    int fn(unmarshall &args, marshall &ret) {
+      A1 a1;
+      A2 a2;
+      A3 a3;
+      A4 a4;
+      A5 a5;
+      R r;
+      args >> a1;
+      args >> a2;
+      args >> a3;
+      args >> a4;
+      assert(args.okdone());
+      int b = (sob->*meth)(a1,a2,a3,a4,a5,r);
+      ret << r;
+      return b;
+    }
+  };
+  reg1(proc, new h1(sob, meth));
+}
+
 
 #endif /* rsm_h */
