// the lock server implementation

#include "lock_server.h"
#include <sstream>
#include <stdio.h>
#include <unistd.h>
#include <arpa/inet.h>

lock_server::lock_server():
nacquire (0)
{
	pthread_mutex_init(&mut, NULL);
}

lock_protocol::status
lock_server::stat(int clt, lock_protocol::lockid_t lid, int &r)
{
	lock_protocol::status ret = lock_protocol::OK;
	printf("stat request from clt %d\n", clt);
	r = nacquire;
	return ret;
}

lock_protocol::status
lock_server::acquire(int clt, lock_protocol::lockid_t lid, int &r)
{
	//printf("acquire request from clt %d\n", clt);
	lock_protocol::status ret = lock_protocol::OK;

	pthread_mutex_lock(&mut);

	if(locks.count(lid) == 0)
	{
		pthread_cond_t new_cond;
		pthread_cond_init(&new_cond,NULL);

		locks[lid] = std::pair<pthread_cond_t,int>(new_cond,-1);
	}
	else
	{
		while(locks[lid].second >=0)
		{
			pthread_cond_wait(&locks[lid].first,&mut);
			printf("woke up: %d for file %d\n", clt,lid);
		}
	}

	locks[lid].second = clt;
	printf("client %d gained access to file %d\n",clt,lid);
	pthread_mutex_unlock(&mut);

	return ret;
}

lock_protocol::status
lock_server::release(int clt, lock_protocol::lockid_t lid, int &)
{
	printf(":release request from clt %d to file %d\n", clt,lid);
	lock_protocol::status ret = lock_protocol::OK;

	pthread_mutex_lock(&mut);

	if(locks[lid].second != clt)
	{
		pthread_mutex_unlock(&mut);
		return ret;
	}

	locks[lid].second = -1;

	int sig = pthread_cond_signal(&locks[lid].first);
	printf("Signal :%d\n",sig);

	pthread_mutex_unlock(&mut);

	return ret;
}


